#include "elevator.h"
#include "software.h"
#include "__common.h"
#include "systemc.h"
using namespace sc_core;
sc_trace_file* file = sc_create_vcd_trace_file("trace");
int sc_main(int argc, char* argv[]) {
  int const static num_floors=8;
  sc_signal<sc_bv<num_floors>> btns_select_floor;
  sc_signal<sc_bv<num_floors>> floor_sensor;
  sc_buffer<bool> door_open;
  sc_signal<sc_bv<num_floors>> btns_out_up;
  sc_signal<sc_bv<num_floors>> btns_out_dn;
  sc_signal<sc_bv<num_floors>> current_floor;
  sc_buffer<bool> cabin_selected;
  sc_signal<bool> btn_close;
  sc_signal<bool> btn_open;
  sc_signal<bool> over_weight_sensor;
  sc_signal<bool> dir_up;
  sc_signal<bool> dir_dn;
  sc_signal<sc_bv<num_floors>> doors_opened;
  sc_signal<bool> motor_up;
  sc_signal<bool> motor_dn;
  sc_signal<sc_bv<num_floors>> led_select_floor;
  sc_signal<bool> led_up;
  sc_signal<bool> led_down;
  sc_signal<bool> overload_alert;
  sc_signal<bool> fire_sensor;
  sc_signal<bool> fire_alert;

  Elevator* elevator = new Elevator();
  Software* software = new Software();
  elevator->btns_select_floor(btns_select_floor);
  elevator->floor_sensor(floor_sensor);
  elevator->door_open(door_open);
  software->door_open(door_open);
  software->btns_out_up(btns_out_up);
  elevator->btns_out_up(btns_out_up);
  software->btns_out_dn(btns_out_dn);
  elevator->btns_out_dn(btns_out_dn);
  elevator->current_floor(current_floor);
  elevator->cabin_selected(cabin_selected);
  software->cabin_selected(cabin_selected);
  elevator->btn_close(btn_close);
  elevator->btn_open(btn_open);
  elevator->over_weight_sensor(over_weight_sensor);
  elevator->dir_up(dir_up);
  elevator->dir_dn(dir_dn);
  elevator->doors_opened(doors_opened);
  elevator->motor_up(motor_up);
  elevator->motor_dn(motor_dn);
  elevator->led_select_floor(led_select_floor);
  elevator->led_up(led_up);
  elevator->led_down(led_down);
  elevator->overload_alert(overload_alert);
  software->fire_sensor(fire_sensor);
  software->fire_alert(fire_alert);

  sc_trace(file, btns_select_floor, "btns_select_floor");
  sc_trace(file, floor_sensor, "floor_sensor");
  sc_trace(file, door_open, "door_open");
  sc_trace(file, btns_out_up, "btns_out_up");
  sc_trace(file, btns_out_dn, "btns_out_dn");
  sc_trace(file, current_floor, "current_floor");
  sc_trace(file, cabin_selected, "cabin_selected");
  sc_trace(file, btn_close, "btn_close");
  sc_trace(file, btn_open, "btn_open");
  sc_trace(file, over_weight_sensor, "over_weight_sensor");
  sc_trace(file, dir_up, "dir_up");
  sc_trace(file, dir_dn, "dir_dn");
  sc_trace(file, doors_opened, "doors_opened");
  sc_trace(file, motor_up, "motor_up");
  sc_trace(file, motor_dn, "motor_dn");
  sc_trace(file, led_select_floor, "led_select_floor");
  sc_trace(file, led_up, "led_up");
  sc_trace(file, led_down, "led_down");
  sc_trace(file, overload_alert, "overload_alert");
  sc_trace(file, fire_sensor, "fire_sensor");
  sc_trace(file, fire_alert, "fire_alert");

  sc_bv<num_floors> _btns_select_floor = "00010000";
  btns_select_floor.write(_btns_select_floor);
  sc_bv<num_floors> _floor_sensor = "00000000";
  floor_sensor.write(_floor_sensor);
  sc_bv<num_floors> _btns_out_up = "00000000";
  btns_out_up.write(_btns_out_up);
  sc_bv<num_floors> _btns_out_dn = "00000000";
  btns_out_dn.write(_btns_out_dn);
  sc_bv<num_floors> _current_floor = "01000000";
  current_floor.write(_current_floor);
  bool _btn_close = (bool)0;
  btn_close.write(_btn_close);
  bool _btn_open = (bool)0;
  btn_open.write(_btn_open);
  bool _over_weight_sensor = (bool)0;
  over_weight_sensor.write(_over_weight_sensor);
  bool _dir_up = (bool)0;
  dir_up.write(_dir_up);
  bool _dir_dn = (bool)0;
  dir_dn.write(_dir_dn);
  sc_bv<num_floors> _doors_opened = "00000000";
  doors_opened.write(_doors_opened);
  bool _motor_up = (bool)0;
  motor_up.write(_motor_up);
  bool _motor_dn = (bool)0;
  motor_dn.write(_motor_dn);
  sc_bv<num_floors> _led_select_floor = "00000000";
  led_select_floor.write(_led_select_floor);
  bool _led_up = (bool)0;
  led_up.write(_led_up);
  bool _led_down = (bool)0;
  led_down.write(_led_down);
  bool _overload_alert = (bool)0;
  overload_alert.write(_overload_alert);
  bool _fire_sensor = (bool)1;
  fire_sensor.write(_fire_sensor);
  bool _fire_alert = (bool)0;
  fire_alert.write(_fire_alert);
  sc_start(1, SC_SEC);
  sc_close_vcd_trace_file(file);
  delete elevator;
  delete software;
  return 0;
}